{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xa0YduqDkYGX"
      },
      "source": [
        "## HW02 Conditional AutoEncoder (PyTorch)\n",
        "\n",
        "MNIST 데이터셋을 이용해 conditional autoencoder (Conditional AE) 기반 generative model을 구축한다.\n",
        "\n",
        "1. Autoencoder의 fully connected layer를 convolution layer로 수정한다.\n",
        "2. 조건(condition)은 데이터의 label로 부여한다.\n",
        "\n",
        "다음을 확인하는 리포트를 Colab 노트북을 이용하여 작성한다.\n",
        "\n",
        "1. 인코더와 디코더를 별개의 class로 구현해 본다.\n",
        "2. 조건(condition)을 Conditional AE의 인코더와 디코더에 어떻게 텐서 형태를 취해 입력으로 주어야 하는지 명시하고, 이에 대해 논의한다.\n",
        "3. 학습을 마친 Conditional AE에 대해, *조건별로* z의 분포를 가시화 한다.\n",
        "4. z의 차원을 임의로 바꾸어 보고, 이때 결과가 어떻게 달라지는지 확인한다.\n",
        "\n",
        "***"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YNoZqefbrdFa"
      },
      "source": [
        "# 조건부 오토인코더 (PyTorch)\n",
        "PyTorch를 이용해, 오토인코더(autoencoder)를 구현한다.\n",
        "* Google Colab 환경에서 사용하는 경우에  초점을 맞춤.\n",
        "* PyTorch\n",
        "\n",
        "참고문헌\n",
        "* [PyTorch Documentation](https://pytorch.org/docs/stable/index.html)\n",
        "* [Deep Learning with Python, by Francois Chollet](https://github.com/fchollet/deep-learning-with-python-notebooks)\n",
        "* [Dive into Deep learning](https://d2l.ai/)\n",
        "\n",
        "주의사항\n",
        "* Colab에서 코드에 이상이 없음에도 불구하고 결과가 제대로 나오지 않을 경우, '런타임 다시 시작...'을 해보도록 한다.'\n",
        "\n",
        "\n",
        "## Deep Neural Network 기초\n",
        "다음 비디오를 보고 심층신경망(deep neural network) 기반 딥러닝 기법은 이해하도록 한다.\n",
        "* [신경망이란 무엇인가? | 1장.딥러닝에 관하여 (3Blue1Brown)](https://youtu.be/aircAruvnKk)\n",
        "* [경사 하강, 신경 네트워크가 학습하는 방법 | 심층 학습, 2장 (3Blue1Brown)](https://youtu.be/IHZwWFHWa-w)\n",
        "* [What is backpropagation really doing? | Deep learning, chapter 3 (3Blue1Brown)](https://youtu.be/Ilg3gGewQ5U)\n",
        "* [Backpropagation calculus | Deep learning, chapter 4 (3Blue1Brown)](https://youtu.be/tIeHLnjs5U8)\n",
        "\n",
        "\n",
        "## PyTorch를 사용하기 위한 구성\n",
        "```\n",
        "import torch                                      # PyTorch 임포트\n",
        "import torch.nn as nn                             # nn 모듈 임포트\n",
        "\n",
        "import torchvision                                # Torchvision 임포트\n",
        "import torchvision.transforms as transforms       # numpy 이미지에서 tensor 이미지로 변경하기 위한 모듈\n",
        "import torchvision.datasets as datasets           # PyTorch 내장된 Dataset을 불러오기 위한 모듈\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "print(torch.__version__)        # PyTorch 버전을 확인하도록 한다.\n",
        "print(torchvision.__version__)        # Torchvision 버전을 확인하도록 한다.\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BlSgcobiQ4TL",
        "outputId": "5999c75b-bdce-4965-b746-47b941967e1f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.13.1+cu116\n",
            "0.14.1+cu116\n"
          ]
        }
      ],
      "source": [
        "import time\n",
        "from tqdm import tqdm\n",
        "\n",
        "import torch                                      # PyTorch 임포트\n",
        "import torch.nn as nn                             # nn 모듈 임포트\n",
        "\n",
        "import torchvision                                # Torchvision 임포트\n",
        "import torchvision.transforms as transforms       # numpy 이미지에서 tensor 이미지로 변경하기 위한 모듈\n",
        "import torchvision.datasets as datasets           # PyTorch 내장된 Dataset을 불러오기 위한 모듈\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "print(torch.__version__)        # PyTorch 버전을 확인하도록 한다.\n",
        "print(torchvision.__version__)        # Torchvision 버전을 확인하도록 한다."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4dkAe4B_epnn"
      },
      "source": [
        "## GPU 동작 확인"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "52na979pepH-",
        "outputId": "5ec1c888-ecb7-4848-c1c4-d1675e565346"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "Tesla T4\n",
            "cuda:0\n"
          ]
        }
      ],
      "source": [
        "use_cuda = torch.cuda.is_available()\n",
        "print(use_cuda)\n",
        "\n",
        "if use_cuda:\n",
        "  print(torch.cuda.get_device_name(0))\n",
        "\n",
        "device = torch.device(\"cuda:0\" if use_cuda else \"cpu\")\n",
        "print(device)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2U2ydnoXIw0R"
      },
      "source": [
        "## Hyperparameter 설정\n",
        "\n",
        "* Batch size\n",
        "* Learning rate\n",
        "* Epoch"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iJm51ghuI6i9"
      },
      "outputs": [],
      "source": [
        "num_classes = 10\n",
        "\n",
        "epochs = 20\n",
        "batch_size = 100\n",
        "lr = 0.003"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X28xZ_JmRQZG"
      },
      "source": [
        "## MNIST 데이터셋 띄우기\n",
        "![MnistExamples.png](https://upload.wikimedia.org/wikipedia/commons/2/27/MnistExamples.png)\n",
        "* mnist 데이터셋은 숫자(digit) 손글씨 데이터셋이다.\n",
        "* 60,000개의 트레이닝 데이터와 10,000개의 테스트 데이터로 이루어져 있다.\n",
        "* LeCun이 자신의 연구에서 활용하고 배포한 데이터셋이 있으나 최근 보편적으로 많이 활용하기 때문에 텐서플로우나 파이토치 등에서 built-in 데이터셋의 형태로 제공해 주기도 한다.  \n",
        "\n",
        "### MNIST 이미지 데이터\n",
        "* MNIST 데이터셋은 여러 버젼이 있으나, 여기서는 이를 파이토치에 맞게 정리하여 torchvision.datasets에서 built-in으로 제공하는 데이터셋을 쓰도록 하겠다. ([link](https://pytorch.org/vision/main/generated/torchvision.datasets.MNIST.html)) \n",
        "  + (PIL image, integer label)로 구성된 데이터를 제공.\n",
        "  + PIL image는 각 픽셀이 [0, 255] 사이값으로 구성된 H x W x C 크기의 이미지이다.\n",
        "* 뉴럴넷의 입력으로 넣기 위해 픽셀값이 0 근처에 있는 작은 실수값을 가지도록 다음과 같이 변환한다.\n",
        "  + ToTensor(): [0, 255] 사이 값을 [0.0, 1.0] 사이값으로 변화시킴과 동시에 C x H x W 형태로 변환시킨다."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B30ehSInraeY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443,
          "referenced_widgets": [
            "ec499c2ec3d94bdc8dddb9443f8d2170",
            "f5eefcef599b4011a07cd51f7976f78f",
            "e42cac8c8f924c28af3ead5157a9dc23",
            "b488146a38864b87af13b94cd1e54206",
            "5bad8eeb370f47b6b74caac215e273dd",
            "085ab519b647427d8059ef199f456974",
            "9b5c372f6f5244628131a27fa98fcf56",
            "dca46dc7e9d74b3cb55c38afbced27f2",
            "a5133f7e8ea742818ab884cbab25e862",
            "6f21fac64bf14d399ce53a3df235f0f5",
            "4c749d1aa3ff45dd9ce7ed54991faf00",
            "def47d201fbd4b9284dd4b211d13790f",
            "07824ad73036434eb555ac5e254f19ac",
            "c75e4489776949efa0f92eae1ea6b86d",
            "6ee905210e664eb298c5466618af43f0",
            "7d3539422b214aed9d250bb594c3eb7a",
            "424a7a8e45c348b393206d4c5903ff50",
            "29d2f09418754b25ae2817164e25b261",
            "6e191982fcd94ed39bda6cf10ffa092c",
            "a35f45e3e2754bb9a40a885511972eb9",
            "bad563332dda4e0f9358b67728b20be6",
            "888835dd91b94a98a928cc051ac5cfc8",
            "6b0a8518d00e4db0b0a0a5c7facdc013",
            "6f02d9e47968457fbaf7eca84b92a3b0",
            "5183e4aae9764515b64509527b6a37ee",
            "8a984427eef44dc2897856879302dae7",
            "2f80d726b9fc4a4fbbc0256bfc31c6c3",
            "2a147da084f04a72a8aa1f25191e570a",
            "6c9d253420874d08a0994edbf9ad75ea",
            "6d809e9f631349a3a56372c2d94c77c9",
            "58555d7c8f944ad4be638d91a18dc45d",
            "bcd5bc36d0e743a1acc474ebdca943ae",
            "6fc1c98990a24d39aa3431f520ae913d",
            "947f1c22bd634dcd87e836702f0038fc",
            "f10b1a865de94e68b2888b6e02ed6b76",
            "bcc6b0e5868c4e4ba518410326208343",
            "9d50c56bae724af2b7ee3e3c1377166e",
            "aa2d90b9df534579a85e71047badf736",
            "49c3846c77d04a82bc00b957d06f4881",
            "4260bbc35ded4de4a80930334ac7f2a4",
            "a13762c6bc2b4c10b001674e2dae5306",
            "835145f979884a32a1e197f36d7eb5b8",
            "a90759853e5b4dcfb11de7f5cfaf6b5e",
            "bf3dea542dc84a3f8608714525afb33e"
          ]
        },
        "outputId": "8a055c4b-b670-491a-f359-01aca5237429"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./MNIST_DATASET/MNIST/raw/train-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/9912422 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "ec499c2ec3d94bdc8dddb9443f8d2170"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./MNIST_DATASET/MNIST/raw/train-images-idx3-ubyte.gz to ./MNIST_DATASET/MNIST/raw\n",
            "\n",
            "Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./MNIST_DATASET/MNIST/raw/train-labels-idx1-ubyte.gz\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/28881 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "def47d201fbd4b9284dd4b211d13790f"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./MNIST_DATASET/MNIST/raw/train-labels-idx1-ubyte.gz to ./MNIST_DATASET/MNIST/raw\n",
            "\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./MNIST_DATASET/MNIST/raw/t10k-images-idx3-ubyte.gz\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/1648877 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6b0a8518d00e4db0b0a0a5c7facdc013"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./MNIST_DATASET/MNIST/raw/t10k-images-idx3-ubyte.gz to ./MNIST_DATASET/MNIST/raw\n",
            "\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n",
            "Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./MNIST_DATASET/MNIST/raw/t10k-labels-idx1-ubyte.gz\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/4542 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "947f1c22bd634dcd87e836702f0038fc"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting ./MNIST_DATASET/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./MNIST_DATASET/MNIST/raw\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import torchvision.transforms as transforms\n",
        "from torchvision.datasets import MNIST\n",
        "\n",
        "# download path 정의\n",
        "download_root = './MNIST_DATASET'\n",
        "\n",
        "\n",
        "# PIL image (H x W x C) -> torch tensor (C x H x W) and \n",
        "# [0, 255] -> [0.0, 1.0]\n",
        "mnist_transform = transforms.Compose([\n",
        "    transforms.ToTensor(), \n",
        "])\n",
        "\n",
        "train_dataset = MNIST(download_root, \n",
        "                      transform=mnist_transform, \n",
        "                      train=True, \n",
        "                      download=True)\n",
        "\n",
        "test_dataset = MNIST(download_root,\n",
        "                     transform=mnist_transform, \n",
        "                     train=False, \n",
        "                     download=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_1lZoqtoDCy4"
      },
      "source": [
        "## 데이터셋 확인\n",
        "데이터셋을 로딩한 후 **데이터셋 구성**이 어떻게 되어 있는지 **반드시 확인**하는 습관을 가지도록 한다.\n",
        "\n",
        "torchvision.datasets.MNIST 데이터셋의 각 데이터는 (이미지, 레이블)로 구성된 튜플이다. \n",
        "\n",
        "다음은 MNIST 데이터셋에 있는 이미지와 레이블에 대한 각종 정보를 확인하는 코드이다. \n",
        "\n",
        "해당 코드를 통해 다음 사항을 확인할 수 있다.\n",
        "* train_dataset의 길이는 60,000이다. \n",
        "* test_dataset의 길이는 10,000이다.\n",
        "\n",
        "### MNIST 이미지 데이터\n",
        "* 각 이미지는 C X H x W 순서로 구성된 [1, 28, 28] 모양의 텐서로 로딩되었다.\n",
        "* 각 이미지 픽셀값은 ToTensor() 변환을 통해 [0.0, 1.0] 사이의 값으로 변환되었다.\n",
        "* 각 이미지 픽셀값은 `torch.float32` 타입이다.\n",
        "* 각 레이블 값의 타입은 파이썬 `int` 형이다.\n",
        "\n",
        "### MNIST 라벨 데이터\n",
        "* 각 레이블 값은 [0, 9] 사이의 파이썬 `int`형이다."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h_VIhYpgC5y4"
      },
      "source": [
        "## MNIST DataLoader 정의\n",
        "\n",
        "파이토치 데이터로더는 데이터셋을 배치단위로 묶어 순회(iteration)할 수 있도록 한다. \n",
        "\n",
        "아래 코드는 데이터셋에 대한 데이터로더를 만들고, 각 배치가 어떤 텐서 형태로 구성되어 있는지 확인하는 코드이다. \n",
        "* 데이터로더에서는 이미지들이 배치단위로 묶였기 때문에, [B, C, H, W] 모양의 텐서가 되었음을 확인하자.\n",
        "* 데이터로더에서는 레이블들이 배치단위로 묶였기 때문에, [B] 모양의 텐서가 되었음을 확인하자.\n",
        "\n",
        "train_dataset과 test_dataset은 동일 형태이므로, train_dataset의 데이터로더에 대해서만 확인하였다.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YN0viHldMCEj"
      },
      "outputs": [],
      "source": [
        "from torch.utils.data import DataLoader\n",
        "\n",
        "# dataloader 정의\n",
        "train_loader = DataLoader(dataset=train_dataset,\n",
        "                          batch_size=batch_size,\n",
        "                          shuffle=True)\n",
        "\n",
        "test_loader = DataLoader(dataset=test_dataset,\n",
        "                         batch_size=batch_size,\n",
        "                         shuffle=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aTh8FMFZDGcQ",
        "outputId": "a7279503-eb8a-4c5f-f2d0-bd93cf2ad4b6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "train dataset\n",
            ">>> dataset length:  600\n",
            ">>> batch_size:  100\n",
            ">>> batch_images type <class 'torch.Tensor'>\n",
            ">>> batch_images shape torch.Size([100, 1, 28, 28])\n",
            ">>> batch_images dtype torch.float32\n",
            "test dataset\n",
            ">>> dataset length:  100\n",
            ">>> batch_size:  100\n",
            ">>> batch_images type <class 'torch.Tensor'>\n",
            ">>> batch_images shape torch.Size([100, 1, 28, 28])\n",
            ">>> batch_images dtype torch.float32\n"
          ]
        }
      ],
      "source": [
        "def print_MNIST_data_loader_info(data_loader):\n",
        "  print(\">>> dataset length: \", len(data_loader))\n",
        "  print(\">>> batch_size: \", data_loader.batch_size)\n",
        "  batch_images, batch_labels = next(iter(train_loader))\n",
        "  # batch size로 묶은 data 이미지의 형태 확인\n",
        "  print(\">>> batch_images type\", type(batch_images))\n",
        "  print(\">>> batch_images shape\", batch_images.shape)\n",
        "  print(\">>> batch_images dtype\", batch_images.dtype)\n",
        "\n",
        "print(\"train dataset\")\n",
        "print_MNIST_data_loader_info(train_loader)\n",
        "\n",
        "print(\"test dataset\")\n",
        "print_MNIST_data_loader_info(test_loader)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XpBRbl4vDIHn"
      },
      "source": [
        "### 첫번째 배치의 첫번째 이미지와 레이블 확인\n",
        "첫 이미지와 해당 레이블을 찍어서 확인해 보자.\n",
        "\n",
        "C x H x W 이미지 정보가 보관된 파이토치 텐서를 H x W x C 형태의 PIL 이미지로 변환시키는 편리한 방법은 `to_pil_images` 함수를 사용하는 것이다. 이 예제에서는 [-1.0, 1.0] 값으로 픽셀값이 normalize되어 있으므로, [0.0, 1.0] 값으로 denormalize 시킨 후, 호출하면 [0, 255] 값으로 \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "QVI8AF6WDIX_",
        "outputId": "6087a678-545d-491f-97ec-f5c11c56e0be"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7ff8660b3df0>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "from torchvision.transforms.functional import to_pil_image\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 첫번째 이미지 한장에 대한 확인\n",
        "batch_images, batch_labels = next(iter(train_loader))\n",
        "\n",
        "img = batch_images[0]\n",
        "\n",
        "plt.figure()\n",
        "plt.imshow(to_pil_image(img), cmap='gray')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HejAYapXdQAT"
      },
      "source": [
        "## 네트워크 모델 설계\n",
        "* 인코더 모델: nn.Module을 상속받는 Class 내의 함수로 작성\n",
        "  + InputLayer로 (1,28,28) 영상을 받고, 출력으로 n_dim차원 벡터가 나오도록 함.\n",
        "* 디코더 모델: nn.Module을 상속받는 Class 내의 함수로 작성\n",
        "  + InputLayer에서 n_dim차원 벡터를 받고, 출력으로 (1,28,28) 영상이 나오도록 함.\n",
        "* 오토인코더 모델: nn.Module을 상속받는 Class로 작성\n",
        "  + 주의: InputLayer를 추가해야 곧장 함수로서 활용할 수 있음.\n",
        "\n",
        "\n",
        "여기서는 n_dim을 수업시간과는 달리 2로 설정한다.\n",
        "* 즉, n_dim=2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LewB-ZJxldxv"
      },
      "outputs": [],
      "source": [
        "n_dim = 2\n",
        "c_dim = 10"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dkngRJuOqM3Y"
      },
      "source": [
        "## TODO (1)\n",
        "\n",
        "아래 코드와 달리 인코더와 디코더를 별개의 class로 나누어 구현해 본다.\n",
        "\n",
        "## TODO (2)\n",
        "\n",
        "모든 layer는 convolution layer로 수정한다. \n",
        "\n",
        "조건(condition)이 어떤 형태로 주어져야 하는지를 명시하고, 이에 대해 논의한다."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xQk0zZ75d0I7"
      },
      "source": [
        "## Encoder\n",
        "- (1, 28, 28) 크기의 이미지를 입력으로 받도록 입력 레이어 정의\n",
        "- Flatten으로 입력 tensor를 784-vector로 vectorize\n",
        "- Fully connected layer로 784 + 10 > 256 > 128 > 32 > n_dim 순으로 차원을 축소"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X0fWCnuvfITn"
      },
      "source": [
        "## Decoder\n",
        "- n_dim 크기의 tensor를 입력으로 받도록 입력 레이어 정의\n",
        "- Fully connected layer로 n_dim + 10 > 32 > 256 > 784 순으로 차원을 확대\n",
        "- 784-vector를 Reshape하여 처음 입력 이미지와 같은 (1, 28, 28) tensor로 변환"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GQfnZeBSTJF4"
      },
      "outputs": [],
      "source": [
        "## TODO\n",
        "class Encoder(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        \n",
        "        self.c1 = nn.Conv2d(1+c_dim, 22, kernel_size=3, stride=2, padding=2)\n",
        "        self.bn1 = nn.BatchNorm2d(22)\n",
        "        self.c2 = nn.Conv2d(22, 44, kernel_size=4, stride=2, padding=2)\n",
        "        self.bn2 = nn.BatchNorm2d(44)\n",
        "        self.c3 = nn.Conv2d(44, 88, kernel_size=3, stride=2) \n",
        "        self.bn3 = nn.BatchNorm2d(88)\n",
        "        self.fc1 = nn.Linear(88 * 3 * 3, n_dim)\n",
        "\n",
        "        self.relu = nn.ReLU()\n",
        "\n",
        "\n",
        "    def encoder(self, x, c):\n",
        "        c = c.unsqueeze(2).unsqueeze(3)\n",
        "        c = c.to(x.device).expand(-1, -1, x.size(2), x.size(3))\n",
        "        x = torch.cat([x, c], 1) \n",
        "        \n",
        "        x = self.c1(x)\n",
        "        x = self.bn1(x)\n",
        "        x = self.relu(x)\n",
        "        x = self.c2(x)\n",
        "        x = self.bn2(x)\n",
        "        x = self.relu(x)\n",
        "        x = self.c3(x)\n",
        "        x = self.bn3(x)\n",
        "        x = self.relu(x)\n",
        "        x = x.view(-1, 88 * 3 * 3)\n",
        "        x = self.fc1(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "    def forward(self, x, c):\n",
        "        x = self.encoder(x, c)\n",
        "        return x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dlih3cW3Tmvm"
      },
      "outputs": [],
      "source": [
        "class Decoder(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        \n",
        "        self.fc1 = nn.Linear(n_dim + c_dim, 512)\n",
        "        self.fc2 = nn.Linear(512, 88*3*3)\n",
        "        self.c3 = nn.ConvTranspose2d(88, 44, kernel_size=3, stride=2)\n",
        "        self.c2 = nn.ConvTranspose2d(44, 22, kernel_size=3, stride=2)\n",
        "        self.c1 = nn.ConvTranspose2d(22, 1, kernel_size=3, stride=2, padding=2, output_padding=1)\n",
        "        \n",
        "        self.sigmoid = nn.Sigmoid()\n",
        "        self.relu = nn.ReLU()\n",
        "\n",
        "    def decoder(self, x, c):\n",
        "\n",
        "        x.to(device)\n",
        "        c.to(device)\n",
        "        x = torch.cat([x, c], 1)\n",
        "        x = self.fc1(x)\n",
        "        x = self.relu(x)\n",
        "        x = self.fc2(x)\n",
        "        x = self.relu(x)\n",
        "        \n",
        "        x = x.view(-1, 88, 3, 3)\n",
        "        x = self.c3(x)\n",
        "        x = self.relu(x)\n",
        "        x = self.c2(x)\n",
        "        x = self.relu(x)\n",
        "        x = self.c1(x)\n",
        "        x = self.sigmoid(x)\n",
        "        return x\n",
        "\n",
        "    def forward(self, x, c):\n",
        "        x = self.decoder(x, c)\n",
        "        return x\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yKkI7MHhT3aG"
      },
      "outputs": [],
      "source": [
        "## TODO\n",
        "class CondAE(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.encoder = Encoder().to(device)\n",
        "        self.decoder = Decoder().to(device)\n",
        "\n",
        "    def forward(self, x, c):\n",
        "        \n",
        "        x = self.encoder(x, c)\n",
        "        x = self.decoder(x, c)\n",
        "        return x\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RMu-R3Z9UMql"
      },
      "outputs": [],
      "source": [
        "# 네트워크 모델 생성\n",
        "\n",
        "ae = CondAE().to(device)\n",
        "for p in ae.parameters():\n",
        "    p.data = p.data.cuda()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mgdloJX4e9jC"
      },
      "source": [
        "## 훈련 전, 네트워크 모델을 함수로서 활용\n",
        "* AutoEncoder ae를 모델로 구성했기 때문에, 지금부터 함수로서 활용 가능 [(효과적인 TensorFlow: 세션 대신 함수)](https://www.tensorflow.org/guide/effective_tf2?hl=ko#%EC%84%B8%EC%85%98_%EB%8C%80%EC%8B%A0_%ED%95%A8%EC%88%98)\n",
        "  + 단, ae 함수는 batch 단위로 수행됨을 명심할 것.  \n",
        "    - 단순히, (1, 28, 28) -> ae -> (1, 28, 28)로 동작하지 않고,\n",
        "    - batch 단위로 (?, 1, 28, 28) -> ae -> (?, 1, 28, 28)로 병렬처리됨.\n",
        "* 지금은 훈련 전 네트웍이기 때문에 정상적으로 작동하지 않음."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406,
          "referenced_widgets": [
            "3b00f7befa284a95b03a72f6ecf00e6e",
            "2a780d8bbe8c468d9b3342e933073f63",
            "38e2c28cdfed46b8b11f533647d76f91",
            "9fb65bb5004e42f9b8a1e9b94ceca2aa",
            "481e3819510b468fa7ae354a9bd960c7",
            "54fe718d30b54c688f4065e580a17b05",
            "14f979806a304e8fa21bdd3de91eb8b1"
          ]
        },
        "id": "Vjs5bWFA00l-",
        "outputId": "1e2e2659-2650-4c15-9699-6d12b9a62036"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "interactive(children=(IntSlider(value=0, continuous_update=False, description='idx', max=59999), Output()), _d…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "3b00f7befa284a95b03a72f6ecf00e6e"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.train_dataset_imshow(idx)>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from torchvision.transforms.functional import to_pil_image\n",
        "import ipywidgets as widgets\n",
        "\n",
        "def train_dataset_imshow(idx):\n",
        "  (image, label) = train_dataset[idx]\n",
        "  print('GT label:', label)\n",
        "  X                 = torch.unsqueeze(image, 0).to(device)                              # batch size = 1 \n",
        "  label             = torch.tensor([label])\n",
        "  label             = label.view(label.shape[0], 1)\n",
        "  one_hot_labels    = torch.zeros(label.shape[0], num_classes).scatter_(1, label, 1)\n",
        "  C                 = one_hot_labels.to(device)                                         # batch size = 1\n",
        "  print(type(X), type(C))\n",
        "  print(X.shape, C.shape)\n",
        "  Y_pred            = ae(X, C)[0]#[:, 0, :, :].unsqueeze(1)\n",
        "  print(Y_pred.shape)\n",
        "\n",
        "  input_img  = to_pil_image(X.squeeze())\n",
        "  output_img = to_pil_image(Y_pred.squeeze())\n",
        "  \n",
        "  plt.subplot(121)\n",
        "  plt.imshow(input_img, cmap='gray')\n",
        "  \n",
        "  plt.subplot(122)\n",
        "  plt.imshow(output_img, cmap='gray')\n",
        "\n",
        "  plt.show()\n",
        "\n",
        "widgets.interact(train_dataset_imshow, idx=widgets.IntSlider(min=0, max=len(train_dataset)-1, continuous_update=False))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4znk4Q1ufJ6G"
      },
      "source": [
        "## 네트워크 모델 구조 확인\n",
        "- torchinfo 라이브러리를 사용"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f4QxjdFe1Hy5",
        "outputId": "102f7c9b-221a-40c3-f48d-e0fc8ce2af25"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: torchinfo in /usr/local/lib/python3.9/dist-packages (1.7.2)\n"
          ]
        }
      ],
      "source": [
        "pip install torchinfo"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rtUVNwJe47R1",
        "outputId": "6ef8150d-bca9-4dfe-fc55-62ea6151df1d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "==========================================================================================\n",
              "Layer (type:depth-idx)                   Output Shape              Param #\n",
              "==========================================================================================\n",
              "CondAE                                   [100, 1, 28, 28]          --\n",
              "├─Encoder: 1-1                           [100, 2]                  --\n",
              "│    └─Conv2d: 2-1                       [100, 22, 15, 15]         2,200\n",
              "│    └─BatchNorm2d: 2-2                  [100, 22, 15, 15]         44\n",
              "│    └─ReLU: 2-3                         [100, 22, 15, 15]         --\n",
              "│    └─Conv2d: 2-4                       [100, 44, 8, 8]           15,532\n",
              "│    └─BatchNorm2d: 2-5                  [100, 44, 8, 8]           88\n",
              "│    └─ReLU: 2-6                         [100, 44, 8, 8]           --\n",
              "│    └─Conv2d: 2-7                       [100, 88, 3, 3]           34,936\n",
              "│    └─BatchNorm2d: 2-8                  [100, 88, 3, 3]           176\n",
              "│    └─ReLU: 2-9                         [100, 88, 3, 3]           --\n",
              "│    └─Linear: 2-10                      [100, 2]                  1,586\n",
              "├─Decoder: 1-2                           [100, 1, 28, 28]          --\n",
              "│    └─Linear: 2-11                      [100, 512]                6,656\n",
              "│    └─ReLU: 2-12                        [100, 512]                --\n",
              "│    └─Linear: 2-13                      [100, 792]                406,296\n",
              "│    └─ReLU: 2-14                        [100, 792]                --\n",
              "│    └─ConvTranspose2d: 2-15             [100, 44, 7, 7]           34,892\n",
              "│    └─ReLU: 2-16                        [100, 44, 7, 7]           --\n",
              "│    └─ConvTranspose2d: 2-17             [100, 22, 15, 15]         8,734\n",
              "│    └─ReLU: 2-18                        [100, 22, 15, 15]         --\n",
              "│    └─ConvTranspose2d: 2-19             [100, 1, 28, 28]          199\n",
              "│    └─Sigmoid: 2-20                     [100, 1, 28, 28]          --\n",
              "==========================================================================================\n",
              "Total params: 511,339\n",
              "Trainable params: 511,339\n",
              "Non-trainable params: 0\n",
              "Total mult-adds (M): 604.92\n",
              "==========================================================================================\n",
              "Input size (MB): 0.32\n",
              "Forward/backward pass size (MB): 21.05\n",
              "Params size (MB): 2.05\n",
              "Estimated Total Size (MB): 23.41\n",
              "=========================================================================================="
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ],
      "source": [
        "from torchinfo import summary\n",
        "\n",
        "summary(ae, [(batch_size, 1, 28, 28), (batch_size, 10)])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LalZns7Pl9JJ"
      },
      "source": [
        "## Optimizer, loss 함수 설정\n",
        "학습과정에서 사용할 optimizer, loss 함수를 설정한다.\n",
        "* [optim module](https://pytorch.org/docs/stable/optim.html) 참고<br/>\n",
        "optimizier 이론적 학습: [www](https://brunch.co.kr/@chris-song/50)<br/>\n",
        "optimizer: torch.optim 모듈 내의  함수들을 다음의 예약어로 쓸 수 있다.\n",
        "  + sgd = SGD\n",
        "  + rmsprop = RMSprop\n",
        "  + adagrad = Adagrad\n",
        "  + adadelta = Adadelta\n",
        "  + adam = Adam\n",
        "  + adamax = Adamax\n",
        "* [nn module](https://pytorch.org/docs/stable/nn.html) 참고 <br/> \n",
        "loss:  torch.nn 모듈 내의  함수들을 다음의 예약어로 쓸 수 있다.\n",
        "  + mse = MSELoss = mean_squared_error\n",
        "  + mae = L1Loss = mean_absolute_error\n",
        "  + kld = KLDivLoss = kullback_leibler_divergence\n",
        "  + crossentropy = CrossEntropyLoss"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hCZGflYQ8HyF"
      },
      "outputs": [],
      "source": [
        "# optimizer 설정\n",
        "optimizer = torch.optim.Adam(ae.parameters(), lr=lr)\n",
        "\n",
        "# loss function 설정\n",
        "criterion = nn.MSELoss()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L6Ht8kyN76Uu",
        "outputId": "9112edb0-a4c3-487f-f3e0-ab813e9d6d70"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  0%|          | 0/20 [00:00<?, ?it/s]/usr/local/lib/python3.9/dist-packages/torch/nn/modules/loss.py:536: UserWarning: Using a target size (torch.Size([100, 1, 28, 28])) that is different to the input size (torch.Size([1, 28, 28])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n",
            "  return F.mse_loss(input, target, reduction=self.reduction)\n",
            "  5%|▌         | 1/20 [00:20<06:23, 20.21s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    1] \t loss = 0.0710 \t time = 20.2026\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 10%|█         | 2/20 [00:31<04:29, 14.99s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    2] \t loss = 0.0674 \t time = 11.3398\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 15%|█▌        | 3/20 [00:42<03:45, 13.29s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    3] \t loss = 0.0674 \t time = 11.2620\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 20%|██        | 4/20 [00:53<03:18, 12.44s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    4] \t loss = 0.0674 \t time = 11.1224\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 25%|██▌       | 5/20 [01:05<03:00, 12.02s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    5] \t loss = 0.0674 \t time = 11.2863\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 30%|███       | 6/20 [01:16<02:44, 11.76s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    6] \t loss = 0.0673 \t time = 11.2606\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 35%|███▌      | 7/20 [01:28<02:34, 11.89s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    7] \t loss = 0.0673 \t time = 12.1510\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 40%|████      | 8/20 [01:39<02:19, 11.65s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    8] \t loss = 0.0673 \t time = 11.1178\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 45%|████▌     | 9/20 [01:50<02:05, 11.41s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:    9] \t loss = 0.0673 \t time = 10.9054\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 50%|█████     | 10/20 [02:01<01:51, 11.18s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:   10] \t loss = 0.0673 \t time = 10.6607\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 55%|█████▌    | 11/20 [02:12<01:40, 11.22s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:   11] \t loss = 0.0673 \t time = 11.2875\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 60%|██████    | 12/20 [02:23<01:29, 11.21s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:   12] \t loss = 0.0673 \t time = 11.1821\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 65%|██████▌   | 13/20 [02:35<01:18, 11.21s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:   13] \t loss = 0.0673 \t time = 11.2330\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 70%|███████   | 14/20 [02:46<01:07, 11.22s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:   14] \t loss = 0.0673 \t time = 11.2186\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 75%|███████▌  | 15/20 [02:57<00:56, 11.20s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:   15] \t loss = 0.0673 \t time = 11.1696\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 80%|████████  | 16/20 [03:08<00:44, 11.19s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:   16] \t loss = 0.0673 \t time = 11.1715\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 85%|████████▌ | 17/20 [03:20<00:33, 11.26s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:   17] \t loss = 0.0673 \t time = 11.4196\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 90%|█████████ | 18/20 [03:31<00:22, 11.22s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:   18] \t loss = 0.0673 \t time = 11.1249\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r 95%|█████████▌| 19/20 [03:44<00:11, 11.85s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:   19] \t loss = 0.0673 \t time = 13.3058\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 20/20 [04:01<00:00, 12.06s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Epoch:   20] \t loss = 0.0673 \t time = 16.7938\n",
            "Learning Finished!\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ],
      "source": [
        "# Training\n",
        "\n",
        "if use_cuda:\n",
        "  ae = ae.cuda()\n",
        "\n",
        "for epoch in tqdm(range(epochs)):\n",
        "  start = time.time()\n",
        "  avg_loss = 0\n",
        "  total_batch = len(train_loader)\n",
        "\n",
        "  for i, (images, labels) in enumerate(train_loader):\n",
        "    # labels -> one-hot vector\n",
        "    labels = labels.view(batch_size, 1)\n",
        "    labels = torch.zeros(labels.size(0), num_classes).scatter_(1, labels, 1)\n",
        "\n",
        "\n",
        "    if use_cuda:\n",
        "      images = images.to(device)\n",
        "      labels = labels.to(device)\n",
        "\n",
        "    \n",
        "    # forward propagation\n",
        "    pred = ae(images, labels)[0]#[:, 0, :, :].unsqueeze(1)\n",
        "    \n",
        "    # print(pred.shape, images.shape)\n",
        "\n",
        "    # loss 측정\n",
        "    loss = criterion(pred, images)\n",
        "\n",
        "    # backward propagation\n",
        "    optimizer.zero_grad()\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "    \n",
        "    avg_loss += loss / total_batch\n",
        "\n",
        "  print(\"[Epoch: {:>4}] \\t loss = {:.4f} \\t time = {:.4f}\"\n",
        "        .format(epoch + 1, avg_loss.data, time.time() - start))\n",
        "\n",
        "print(\"Learning Finished!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RIorJgkOggm1"
      },
      "source": [
        "## 트레이닝이 끝난 오토인코더를 이용하기\n",
        "트레이닝이 끝난 오토인코더는 함수로서 작동이 가능하다. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CUf-QZUtwwIv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 354,
          "referenced_widgets": [
            "404ea5b67f9b4bfc94b9f08f1ea0c5e8",
            "8a39a472bd7d48a5bfd4856b75d20a95",
            "752829d711084e229466603d22b0204d",
            "66b6ebd4810f46499d6c27d883d46db2",
            "a5eb60961abf4481988bb07a792d1e63",
            "c5b3ef9573a84f1f98bfc4bbba01136a",
            "eb737b4651dc4bfbbc1721fa46ddb605"
          ]
        },
        "outputId": "4ab0ded5-7aa6-4dd0-f24c-671d4dbba4ed"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "interactive(children=(IntSlider(value=0, continuous_update=False, description='idx', max=59999), Output()), _d…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "404ea5b67f9b4bfc94b9f08f1ea0c5e8"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.train_dataset_imshow(idx)>"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from torchvision.transforms.functional import to_pil_image\n",
        "import ipywidgets as widgets\n",
        "\n",
        "def train_dataset_imshow(idx):\n",
        "  (image, label) = train_dataset[idx]\n",
        "  print('GT label:', label)\n",
        "\n",
        "  X                 = torch.unsqueeze(image, 0).to(device)                              # batch size = 1 \n",
        "\n",
        "  label             = torch.tensor([label])\n",
        "  label             = label.view(label.shape[0], 1)\n",
        "  one_hot_labels    = torch.zeros(label.shape[0], num_classes).scatter_(1, label, 1)\n",
        "  C                 = one_hot_labels.to(device)\n",
        "  Y_pred            = ae(X, C)[0] #[:, 0, :, :].unsqueeze(1)                                                       # batch size = 1\n",
        "\n",
        "  input_img  = to_pil_image(X.squeeze())\n",
        "  output_img = to_pil_image(Y_pred.squeeze())\n",
        "  \n",
        "  plt.subplot(121)\n",
        "  plt.imshow(input_img, cmap='gray')\n",
        "  \n",
        "  plt.subplot(122)\n",
        "  plt.imshow(output_img, cmap='gray')\n",
        "\n",
        "  plt.show()\n",
        "\n",
        "widgets.interact(train_dataset_imshow, idx=widgets.IntSlider(min=0, max=len(train_dataset)-1, continuous_update=False))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vq5EdiDog7-c"
      },
      "source": [
        "# 디코더를 이용한 Generative Model 구성\n",
        "## 디코더 부분을 따로 사용하기\n",
        "\n",
        "`ConditionalAE` Class의 decoder 함수를 이용하여 트레이닝이 끝난 조건부 오토인코더의 디코더 부분만 따로 사용할 수 있다.\n",
        "\n",
        "```\n",
        "# 입력으로 주는 데이터는 \n",
        "# decode 단의 처음 input shape에 맞추어야 한다.\n",
        "\n",
        "ae.decoder()\n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VTnO5i8RjKEB"
      },
      "source": [
        "## 디코딩 테스트 입력 결과 확인\n",
        "* 인코딩 결과와 유사한 좌표값을 디코딩에 보내도 유사한 결과가 나옴을 확인한다."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "W2lblukKe7SA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497,
          "referenced_widgets": [
            "6cdd016dd78049889363fa13ef7bf341",
            "165b4254ec634583896ba73e557bf45c",
            "f29681dd8f5443ab8df8ee0de94e30b3",
            "5762c26b6e6d4113a4e622227745d29b",
            "bd6bdc5d05e24051bbc1115cd6ccac3e",
            "b79f8f83d17040158f593025dda5b361",
            "0ea3cee1d2724efcbd3529795ab27a90",
            "7cc54d5535b740ca9a3fe37a48939eba",
            "f83338d46aa24c64901f15245ab11040",
            "40084cf352504cc9b6ccfbcbec876ddd"
          ]
        },
        "outputId": "969098ba-af78-4e2f-f8ac-39b9d885465a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "FloatSlider(value=0.0, max=5.0, min=-5.0) FloatSlider(value=0.0, max=5.0, min=-5.0)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "HBox(children=(FloatSlider(value=0.0, max=5.0, min=-5.0), FloatSlider(value=0.0, max=5.0, min=-5.0)))"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6cdd016dd78049889363fa13ef7bf341"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Output()"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f83338d46aa24c64901f15245ab11040"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "## 디코더의 테스트 입력 설정\n",
        "\n",
        "import ipywidgets as widgets\n",
        "\n",
        "u=widgets.FloatSlider(min=-5.0, max=5.0)\n",
        "v=widgets.FloatSlider(min=-5.0, max=5.0)\n",
        "\n",
        "ui = widgets.HBox([u,v])\n",
        "print(u, v)\n",
        "def z_test(u, v):\n",
        "  z_test = np.array([[u,v]])\n",
        "  c_test = np.array([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]])\n",
        "  print(z_test)\n",
        "\n",
        "  z_test = torch.tensor(z_test.astype(np.float32))\n",
        "  c_test = torch.tensor(c_test.astype(np.float32))\n",
        "  \n",
        "  img_gen = ae.decoder(z_test.to(device), c_test.to(device)).reshape(-1, 28, 28)\n",
        "  plt.imshow(img_gen[0].cpu().detach().numpy(), cmap='gray')\n",
        "  plt.show()  \n",
        "\n",
        "\n",
        "out = widgets.interactive_output(z_test, {'u': u, 'v': v})\n",
        "\n",
        "display(ui, out)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UEXT7SjS-H2E"
      },
      "source": [
        "## TODO (3)\n",
        "\n",
        "Autoencoder의 인코더가 만들어 내는 representation인 z 값을 조건별로 가시화 한다. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Go0pldyYPWse",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        },
        "outputId": "bad90fab-95d0-49ff-c756-9aea7d0a2591"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([980, 2])\n",
            "torch.Size([1135, 2])\n",
            "torch.Size([1032, 2])\n",
            "torch.Size([1010, 2])\n",
            "torch.Size([982, 2])\n",
            "torch.Size([892, 2])\n",
            "torch.Size([958, 2])\n",
            "torch.Size([1028, 2])\n",
            "torch.Size([974, 2])\n",
            "torch.Size([1009, 2])\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7ff8605d5a90>]"
            ]
          },
          "metadata": {},
          "execution_count": 52
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# MNIST 데이터의 latent code 가시화\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 테스트셋의 whole batch에 대한 결과 확인을 위한 dataloader 정의\n",
        "whole_test_loader = DataLoader(dataset=test_dataset,\n",
        "                               batch_size=len(test_dataset),\n",
        "                               shuffle=False)\n",
        "whole_test_images, whole_test_labels = next(iter(whole_test_loader))\n",
        "\n",
        "whole_test_labels_  = whole_test_labels.view(whole_test_labels.shape[0], 1)\n",
        "one_hot_labels      = torch.zeros(whole_test_labels_.shape[0], num_classes).scatter_(1, whole_test_labels_, 1).to(device)\n",
        "\n",
        "whole_test_images = whole_test_images.to(device)\n",
        "whole_test_labels = whole_test_labels.to(device)\n",
        "\n",
        "enc = Encoder().to(device)\n",
        "# TODO: whole_test_images에 대한 인코딩 함수 enc()를 이용해 latent codes z 구하기 \n",
        "z = enc.encoder(whole_test_images, one_hot_labels)\n",
        "\n",
        "# z 배열을 레이블 조건을 이용해 슬라이싱\n",
        "z_0 = z[whole_test_labels==0]\n",
        "z_1 = z[whole_test_labels==1]\n",
        "z_2 = z[whole_test_labels==2]\n",
        "z_3 = z[whole_test_labels==3]\n",
        "z_4 = z[whole_test_labels==4]\n",
        "z_5 = z[whole_test_labels==5]\n",
        "z_6 = z[whole_test_labels==6]\n",
        "z_7 = z[whole_test_labels==7]\n",
        "z_8 = z[whole_test_labels==8]\n",
        "z_9 = z[whole_test_labels==9]\n",
        "\n",
        "print(z_0.shape)\n",
        "print(z_1.shape)\n",
        "print(z_2.shape)\n",
        "print(z_3.shape)\n",
        "print(z_4.shape)\n",
        "print(z_5.shape)\n",
        "print(z_6.shape)\n",
        "print(z_7.shape)\n",
        "print(z_8.shape)\n",
        "print(z_9.shape)\n",
        "\n",
        "# TODO: 레이블 별로 다른 색을 이용해 가시화\n",
        "plt.plot(z_0[:,0].detach().cpu().numpy(), z_0[:,1].detach().cpu().numpy(), 'ro')\n",
        "plt.plot(z_1[:,0].detach().cpu().numpy(), z_1[:,1].detach().cpu().numpy(), 'go')\n",
        "plt.plot(z_2[:,0].detach().cpu().numpy(), z_2[:,1].detach().cpu().numpy(), 'bo')\n",
        "plt.plot(z_3[:,0].detach().cpu().numpy(), z_3[:,1].detach().cpu().numpy(), 'yo')\n",
        "plt.plot(z_4[:,0].detach().cpu().numpy(), z_4[:,1].detach().cpu().numpy(), 'co')\n",
        "plt.plot(z_5[:,0].detach().cpu().numpy(), z_5[:,1].detach().cpu().numpy(), 'mo')\n",
        "plt.plot(z_6[:,0].detach().cpu().numpy(), z_6[:,1].detach().cpu().numpy(), 'ko')\n",
        "plt.plot(z_7[:,0].detach().cpu().numpy(), z_7[:,1].detach().cpu().numpy(), 'wo')\n",
        "plt.plot(z_8[:,0].detach().cpu().numpy(), z_8[:,1].detach().cpu().numpy(), 'bo', markersize=3)\n",
        "plt.plot(z_9[:,0].detach().cpu().numpy(), z_9[:,1].detach().cpu().numpy(), 'go', markersize=3)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gqXwS1G6skIt"
      },
      "source": [
        "## TODO (4)\n",
        "\n",
        "z의 차원을 임의로 바꾸어 보고, 이때 결과가 어떻게 달라지는지 확인한다."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fRbgdF0b2Tvz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        },
        "outputId": "6a3f15fb-f592-41cf-fdf2-9704952b7b30"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([980, 2])\n",
            "torch.Size([1135, 2])\n",
            "torch.Size([1032, 2])\n",
            "torch.Size([1010, 2])\n",
            "torch.Size([982, 2])\n",
            "torch.Size([892, 2])\n",
            "torch.Size([958, 2])\n",
            "torch.Size([1028, 2])\n",
            "torch.Size([974, 2])\n",
            "torch.Size([1009, 2])\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7ff84c236e20>]"
            ]
          },
          "metadata": {},
          "execution_count": 54
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# MNIST 데이터의 latent code 가시화\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 테스트셋의 whole batch에 대한 결과 확인을 위한 dataloader 정의\n",
        "whole_test_loader = DataLoader(dataset=test_dataset,\n",
        "                               batch_size=len(test_dataset),\n",
        "                               shuffle=False)\n",
        "whole_test_images, whole_test_labels = next(iter(whole_test_loader))\n",
        "\n",
        "whole_test_labels_  = whole_test_labels.view(whole_test_labels.shape[0], 1)\n",
        "one_hot_labels      = torch.zeros(whole_test_labels_.shape[0], num_classes).scatter_(1, whole_test_labels_, 1).to(device)\n",
        "\n",
        "whole_test_images = whole_test_images.to(device)\n",
        "whole_test_labels = whole_test_labels.to(device)\n",
        "\n",
        "enc = Encoder().to(device)\n",
        "# TODO: whole_test_images에 대한 인코딩 함수 enc()를 이용해 latent codes z 구하기 \n",
        "z = enc.encoder(whole_test_images, one_hot_labels)\n",
        "z = z.view(-1, 2)\n",
        "\n",
        "# z 배열을 레이블 조건을 이용해 슬라이싱\n",
        "z_0 = z[whole_test_labels==0]\n",
        "z_1 = z[whole_test_labels==1]\n",
        "z_2 = z[whole_test_labels==2]\n",
        "z_3 = z[whole_test_labels==3]\n",
        "z_4 = z[whole_test_labels==4]\n",
        "z_5 = z[whole_test_labels==5]\n",
        "z_6 = z[whole_test_labels==6]\n",
        "z_7 = z[whole_test_labels==7]\n",
        "z_8 = z[whole_test_labels==8]\n",
        "z_9 = z[whole_test_labels==9]\n",
        "\n",
        "print(z_0.shape)\n",
        "print(z_1.shape)\n",
        "print(z_2.shape)\n",
        "print(z_3.shape)\n",
        "print(z_4.shape)\n",
        "print(z_5.shape)\n",
        "print(z_6.shape)\n",
        "print(z_7.shape)\n",
        "print(z_8.shape)\n",
        "print(z_9.shape)\n",
        "\n",
        "# TODO: 레이블 별로 다른 색을 이용해 가시화\n",
        "plt.plot(z_0[:,0].detach().cpu().numpy(), z_0[:,1].detach().cpu().numpy(), 'ro')\n",
        "plt.plot(z_1[:,0].detach().cpu().numpy(), z_1[:,1].detach().cpu().numpy(), 'go')\n",
        "plt.plot(z_2[:,0].detach().cpu().numpy(), z_2[:,1].detach().cpu().numpy(), 'bo')\n",
        "plt.plot(z_3[:,0].detach().cpu().numpy(), z_3[:,1].detach().cpu().numpy(), 'yo')\n",
        "plt.plot(z_4[:,0].detach().cpu().numpy(), z_4[:,1].detach().cpu().numpy(), 'co')\n",
        "plt.plot(z_5[:,0].detach().cpu().numpy(), z_5[:,1].detach().cpu().numpy(), 'mo')\n",
        "plt.plot(z_6[:,0].detach().cpu().numpy(), z_6[:,1].detach().cpu().numpy(), 'ko')\n",
        "plt.plot(z_7[:,0].detach().cpu().numpy(), z_7[:,1].detach().cpu().numpy(), 'wo')\n",
        "plt.plot(z_8[:,0].detach().cpu().numpy(), z_8[:,1].detach().cpu().numpy(), 'bo', markersize=3)\n",
        "plt.plot(z_9[:,0].detach().cpu().numpy(), z_9[:,1].detach().cpu().numpy(), 'go', markersize=3)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "MjRYnzCejmaH"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": []
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "ec499c2ec3d94bdc8dddb9443f8d2170": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f5eefcef599b4011a07cd51f7976f78f",
              "IPY_MODEL_e42cac8c8f924c28af3ead5157a9dc23",
              "IPY_MODEL_b488146a38864b87af13b94cd1e54206"
            ],
            "layout": "IPY_MODEL_5bad8eeb370f47b6b74caac215e273dd"
          }
        },
        "f5eefcef599b4011a07cd51f7976f78f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_085ab519b647427d8059ef199f456974",
            "placeholder": "​",
            "style": "IPY_MODEL_9b5c372f6f5244628131a27fa98fcf56",
            "value": "100%"
          }
        },
        "e42cac8c8f924c28af3ead5157a9dc23": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_dca46dc7e9d74b3cb55c38afbced27f2",
            "max": 9912422,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_a5133f7e8ea742818ab884cbab25e862",
            "value": 9912422
          }
        },
        "b488146a38864b87af13b94cd1e54206": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6f21fac64bf14d399ce53a3df235f0f5",
            "placeholder": "​",
            "style": "IPY_MODEL_4c749d1aa3ff45dd9ce7ed54991faf00",
            "value": " 9912422/9912422 [00:00&lt;00:00, 34709783.26it/s]"
          }
        },
        "5bad8eeb370f47b6b74caac215e273dd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "085ab519b647427d8059ef199f456974": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9b5c372f6f5244628131a27fa98fcf56": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "dca46dc7e9d74b3cb55c38afbced27f2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a5133f7e8ea742818ab884cbab25e862": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "6f21fac64bf14d399ce53a3df235f0f5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4c749d1aa3ff45dd9ce7ed54991faf00": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "def47d201fbd4b9284dd4b211d13790f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_07824ad73036434eb555ac5e254f19ac",
              "IPY_MODEL_c75e4489776949efa0f92eae1ea6b86d",
              "IPY_MODEL_6ee905210e664eb298c5466618af43f0"
            ],
            "layout": "IPY_MODEL_7d3539422b214aed9d250bb594c3eb7a"
          }
        },
        "07824ad73036434eb555ac5e254f19ac": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_424a7a8e45c348b393206d4c5903ff50",
            "placeholder": "​",
            "style": "IPY_MODEL_29d2f09418754b25ae2817164e25b261",
            "value": "100%"
          }
        },
        "c75e4489776949efa0f92eae1ea6b86d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6e191982fcd94ed39bda6cf10ffa092c",
            "max": 28881,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_a35f45e3e2754bb9a40a885511972eb9",
            "value": 28881
          }
        },
        "6ee905210e664eb298c5466618af43f0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bad563332dda4e0f9358b67728b20be6",
            "placeholder": "​",
            "style": "IPY_MODEL_888835dd91b94a98a928cc051ac5cfc8",
            "value": " 28881/28881 [00:00&lt;00:00, 1466445.06it/s]"
          }
        },
        "7d3539422b214aed9d250bb594c3eb7a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "424a7a8e45c348b393206d4c5903ff50": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "29d2f09418754b25ae2817164e25b261": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6e191982fcd94ed39bda6cf10ffa092c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a35f45e3e2754bb9a40a885511972eb9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "bad563332dda4e0f9358b67728b20be6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "888835dd91b94a98a928cc051ac5cfc8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6b0a8518d00e4db0b0a0a5c7facdc013": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_6f02d9e47968457fbaf7eca84b92a3b0",
              "IPY_MODEL_5183e4aae9764515b64509527b6a37ee",
              "IPY_MODEL_8a984427eef44dc2897856879302dae7"
            ],
            "layout": "IPY_MODEL_2f80d726b9fc4a4fbbc0256bfc31c6c3"
          }
        },
        "6f02d9e47968457fbaf7eca84b92a3b0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2a147da084f04a72a8aa1f25191e570a",
            "placeholder": "​",
            "style": "IPY_MODEL_6c9d253420874d08a0994edbf9ad75ea",
            "value": "100%"
          }
        },
        "5183e4aae9764515b64509527b6a37ee": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6d809e9f631349a3a56372c2d94c77c9",
            "max": 1648877,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_58555d7c8f944ad4be638d91a18dc45d",
            "value": 1648877
          }
        },
        "8a984427eef44dc2897856879302dae7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bcd5bc36d0e743a1acc474ebdca943ae",
            "placeholder": "​",
            "style": "IPY_MODEL_6fc1c98990a24d39aa3431f520ae913d",
            "value": " 1648877/1648877 [00:00&lt;00:00, 23064657.42it/s]"
          }
        },
        "2f80d726b9fc4a4fbbc0256bfc31c6c3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2a147da084f04a72a8aa1f25191e570a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6c9d253420874d08a0994edbf9ad75ea": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6d809e9f631349a3a56372c2d94c77c9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "58555d7c8f944ad4be638d91a18dc45d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "bcd5bc36d0e743a1acc474ebdca943ae": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6fc1c98990a24d39aa3431f520ae913d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "947f1c22bd634dcd87e836702f0038fc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f10b1a865de94e68b2888b6e02ed6b76",
              "IPY_MODEL_bcc6b0e5868c4e4ba518410326208343",
              "IPY_MODEL_9d50c56bae724af2b7ee3e3c1377166e"
            ],
            "layout": "IPY_MODEL_aa2d90b9df534579a85e71047badf736"
          }
        },
        "f10b1a865de94e68b2888b6e02ed6b76": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_49c3846c77d04a82bc00b957d06f4881",
            "placeholder": "​",
            "style": "IPY_MODEL_4260bbc35ded4de4a80930334ac7f2a4",
            "value": "100%"
          }
        },
        "bcc6b0e5868c4e4ba518410326208343": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a13762c6bc2b4c10b001674e2dae5306",
            "max": 4542,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_835145f979884a32a1e197f36d7eb5b8",
            "value": 4542
          }
        },
        "9d50c56bae724af2b7ee3e3c1377166e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a90759853e5b4dcfb11de7f5cfaf6b5e",
            "placeholder": "​",
            "style": "IPY_MODEL_bf3dea542dc84a3f8608714525afb33e",
            "value": " 4542/4542 [00:00&lt;00:00, 260253.13it/s]"
          }
        },
        "aa2d90b9df534579a85e71047badf736": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "49c3846c77d04a82bc00b957d06f4881": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4260bbc35ded4de4a80930334ac7f2a4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a13762c6bc2b4c10b001674e2dae5306": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "835145f979884a32a1e197f36d7eb5b8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "a90759853e5b4dcfb11de7f5cfaf6b5e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bf3dea542dc84a3f8608714525afb33e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3b00f7befa284a95b03a72f6ecf00e6e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "widget-interact"
            ],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_2a780d8bbe8c468d9b3342e933073f63",
              "IPY_MODEL_38e2c28cdfed46b8b11f533647d76f91"
            ],
            "layout": "IPY_MODEL_9fb65bb5004e42f9b8a1e9b94ceca2aa"
          }
        },
        "2a780d8bbe8c468d9b3342e933073f63": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntSliderModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "IntSliderModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntSliderView",
            "continuous_update": false,
            "description": "idx",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_481e3819510b468fa7ae354a9bd960c7",
            "max": 59999,
            "min": 0,
            "orientation": "horizontal",
            "readout": true,
            "readout_format": "d",
            "step": 1,
            "style": "IPY_MODEL_54fe718d30b54c688f4065e580a17b05",
            "value": 0
          }
        },
        "38e2c28cdfed46b8b11f533647d76f91": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_14f979806a304e8fa21bdd3de91eb8b1",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "stream",
                "name": "stdout",
                "text": [
                  "GT label: 5\n",
                  "<class 'torch.Tensor'> <class 'torch.Tensor'>\n",
                  "torch.Size([1, 1, 28, 28]) torch.Size([1, 10])\n",
                  "torch.Size([1, 28, 28])\n"
                ]
              },
              {
                "output_type": "display_data",
                "data": {
                  "text/plain": "<Figure size 640x480 with 2 Axes>",
                  "image/png": "\n"
                },
                "metadata": {}
              }
            ]
          }
        },
        "9fb65bb5004e42f9b8a1e9b94ceca2aa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "481e3819510b468fa7ae354a9bd960c7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "54fe718d30b54c688f4065e580a17b05": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SliderStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "",
            "handle_color": null
          }
        },
        "14f979806a304e8fa21bdd3de91eb8b1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "404ea5b67f9b4bfc94b9f08f1ea0c5e8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "widget-interact"
            ],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8a39a472bd7d48a5bfd4856b75d20a95",
              "IPY_MODEL_752829d711084e229466603d22b0204d"
            ],
            "layout": "IPY_MODEL_66b6ebd4810f46499d6c27d883d46db2"
          }
        },
        "8a39a472bd7d48a5bfd4856b75d20a95": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntSliderModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "IntSliderModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntSliderView",
            "continuous_update": false,
            "description": "idx",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_a5eb60961abf4481988bb07a792d1e63",
            "max": 59999,
            "min": 0,
            "orientation": "horizontal",
            "readout": true,
            "readout_format": "d",
            "step": 1,
            "style": "IPY_MODEL_c5b3ef9573a84f1f98bfc4bbba01136a",
            "value": 0
          }
        },
        "752829d711084e229466603d22b0204d": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_eb737b4651dc4bfbbc1721fa46ddb605",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "stream",
                "name": "stdout",
                "text": [
                  "GT label: 5\n"
                ]
              },
              {
                "output_type": "display_data",
                "data": {
                  "text/plain": "<Figure size 640x480 with 2 Axes>",
                  "image/png": "\n"
                },
                "metadata": {}
              }
            ]
          }
        },
        "66b6ebd4810f46499d6c27d883d46db2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a5eb60961abf4481988bb07a792d1e63": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c5b3ef9573a84f1f98bfc4bbba01136a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SliderStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "",
            "handle_color": null
          }
        },
        "eb737b4651dc4bfbbc1721fa46ddb605": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6cdd016dd78049889363fa13ef7bf341": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_165b4254ec634583896ba73e557bf45c",
              "IPY_MODEL_f29681dd8f5443ab8df8ee0de94e30b3"
            ],
            "layout": "IPY_MODEL_5762c26b6e6d4113a4e622227745d29b"
          }
        },
        "165b4254ec634583896ba73e557bf45c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatSliderModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatSliderModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FloatSliderView",
            "continuous_update": true,
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_bd6bdc5d05e24051bbc1115cd6ccac3e",
            "max": 5,
            "min": -5,
            "orientation": "horizontal",
            "readout": true,
            "readout_format": ".2f",
            "step": 0.1,
            "style": "IPY_MODEL_b79f8f83d17040158f593025dda5b361",
            "value": 0
          }
        },
        "f29681dd8f5443ab8df8ee0de94e30b3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatSliderModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatSliderModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FloatSliderView",
            "continuous_update": true,
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_0ea3cee1d2724efcbd3529795ab27a90",
            "max": 5,
            "min": -5,
            "orientation": "horizontal",
            "readout": true,
            "readout_format": ".2f",
            "step": 0.1,
            "style": "IPY_MODEL_7cc54d5535b740ca9a3fe37a48939eba",
            "value": 0
          }
        },
        "5762c26b6e6d4113a4e622227745d29b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bd6bdc5d05e24051bbc1115cd6ccac3e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b79f8f83d17040158f593025dda5b361": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SliderStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "",
            "handle_color": null
          }
        },
        "0ea3cee1d2724efcbd3529795ab27a90": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7cc54d5535b740ca9a3fe37a48939eba": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SliderStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "",
            "handle_color": null
          }
        },
        "f83338d46aa24c64901f15245ab11040": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_40084cf352504cc9b6ccfbcbec876ddd",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "stream",
                "name": "stdout",
                "text": [
                  "[[0. 0.]]\n"
                ]
              },
              {
                "output_type": "display_data",
                "data": {
                  "text/plain": "<Figure size 640x480 with 1 Axes>",
                  "image/png": "\n"
                },
                "metadata": {}
              }
            ]
          }
        },
        "40084cf352504cc9b6ccfbcbec876ddd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
